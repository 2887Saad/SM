// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SA_Management.DataAccessLayer.Data;

#nullable disable

namespace SA_Management.DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SA_Management.Models.BrokerDetails", b =>
                {
                    b.Property<Guid>("BrokerID")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("FixedPriceCut")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("BrokerID");

                    b.ToTable("BrokerDetails");
                });

            modelBuilder.Entity("SA_Management.Models.CompanyPortfolio", b =>
                {
                    b.Property<Guid>("CompanyPortfolioID")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("AveragePriceWithBroker")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AveragePriceWithoutBroker")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("FUTAveragePriceWithBroker")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FUTAveragePriceWithoutBroker")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("FUTQuantityWithBroker")
                        .HasColumnType("int");

                    b.Property<int>("FUTQuantityWithoutBroker")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuantityWithBroker")
                        .HasColumnType("int");

                    b.Property<int>("QuantityWithoutBroker")
                        .HasColumnType("int");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalInvestnment")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("CompanyPortfolioID");

                    b.HasIndex("CompanyID")
                        .IsUnique();

                    b.ToTable("CompanyPortfolios");
                });

            modelBuilder.Entity("SA_Management.Models.ShareCompany", b =>
                {
                    b.Property<Guid>("CompanyID")
                        .HasColumnType("char(36)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CompanyID");

                    b.ToTable("ShareCompanies");
                });

            modelBuilder.Entity("SA_Management.Models.Trade", b =>
                {
                    b.Property<Guid>("TradeID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsBrokerEngaged")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TradeNature")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<decimal>("TradePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TradeType")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.HasKey("TradeID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("SA_Management.Models.TradeDetails", b =>
                {
                    b.Property<Guid>("TradeDetailsID")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("AvgPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("TradeID")
                        .HasColumnType("char(36)");

                    b.HasKey("TradeDetailsID");

                    b.HasIndex("TradeID");

                    b.ToTable("TradeDetails");
                });

            modelBuilder.Entity("SA_Management.Models.CompanyPortfolio", b =>
                {
                    b.HasOne("SA_Management.Models.ShareCompany", "ShareCompany")
                        .WithOne("CompanyPortfolio")
                        .HasForeignKey("SA_Management.Models.CompanyPortfolio", "CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShareCompany");
                });

            modelBuilder.Entity("SA_Management.Models.Trade", b =>
                {
                    b.HasOne("SA_Management.Models.ShareCompany", "ShareCompany")
                        .WithMany("Trades")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShareCompany");
                });

            modelBuilder.Entity("SA_Management.Models.TradeDetails", b =>
                {
                    b.HasOne("SA_Management.Models.Trade", "Trade")
                        .WithMany("TradeDetails")
                        .HasForeignKey("TradeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("SA_Management.Models.ShareCompany", b =>
                {
                    b.Navigation("CompanyPortfolio");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("SA_Management.Models.Trade", b =>
                {
                    b.Navigation("TradeDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
